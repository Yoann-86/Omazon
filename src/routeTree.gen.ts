/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotfoundImport } from './routes/not_found'
import { Route as IndexImport } from './routes/index'
import { Route as CartIndexImport } from './routes/cart/index'
import { Route as ProductIdImport } from './routes/product/$id'
import { Route as CategorySlugImport } from './routes/category/$slug'

// Create/Update Routes

const NotfoundRoute = NotfoundImport.update({
  id: '/not_found',
  path: '/not_found',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CartIndexRoute = CartIndexImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRoute,
} as any)

const ProductIdRoute = ProductIdImport.update({
  id: '/product/$id',
  path: '/product/$id',
  getParentRoute: () => rootRoute,
} as any)

const CategorySlugRoute = CategorySlugImport.update({
  id: '/category/$slug',
  path: '/category/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/not_found': {
      id: '/not_found'
      path: '/not_found'
      fullPath: '/not_found'
      preLoaderRoute: typeof NotfoundImport
      parentRoute: typeof rootRoute
    }
    '/category/$slug': {
      id: '/category/$slug'
      path: '/category/$slug'
      fullPath: '/category/$slug'
      preLoaderRoute: typeof CategorySlugImport
      parentRoute: typeof rootRoute
    }
    '/product/$id': {
      id: '/product/$id'
      path: '/product/$id'
      fullPath: '/product/$id'
      preLoaderRoute: typeof ProductIdImport
      parentRoute: typeof rootRoute
    }
    '/cart/': {
      id: '/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/not_found': typeof NotfoundRoute
  '/category/$slug': typeof CategorySlugRoute
  '/product/$id': typeof ProductIdRoute
  '/cart': typeof CartIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/not_found': typeof NotfoundRoute
  '/category/$slug': typeof CategorySlugRoute
  '/product/$id': typeof ProductIdRoute
  '/cart': typeof CartIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/not_found': typeof NotfoundRoute
  '/category/$slug': typeof CategorySlugRoute
  '/product/$id': typeof ProductIdRoute
  '/cart/': typeof CartIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/not_found' | '/category/$slug' | '/product/$id' | '/cart'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/not_found' | '/category/$slug' | '/product/$id' | '/cart'
  id:
    | '__root__'
    | '/'
    | '/not_found'
    | '/category/$slug'
    | '/product/$id'
    | '/cart/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotfoundRoute: typeof NotfoundRoute
  CategorySlugRoute: typeof CategorySlugRoute
  ProductIdRoute: typeof ProductIdRoute
  CartIndexRoute: typeof CartIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotfoundRoute: NotfoundRoute,
  CategorySlugRoute: CategorySlugRoute,
  ProductIdRoute: ProductIdRoute,
  CartIndexRoute: CartIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/not_found",
        "/category/$slug",
        "/product/$id",
        "/cart/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/not_found": {
      "filePath": "not_found.tsx"
    },
    "/category/$slug": {
      "filePath": "category/$slug.tsx"
    },
    "/product/$id": {
      "filePath": "product/$id.tsx"
    },
    "/cart/": {
      "filePath": "cart/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
